#!/bin/bash -e

# out of docker env, out of the minikube

# define a list to store the mid-res we get from kubectl get svc to store the relationship between cluster ip and cluster name
declare -a array
idx=0
TARGET_GW_IP=192.168.49.2
TAGET_BRIDGE_NAME=br-56341afb63c2


for record in `minikube kubectl -- get svc | grep rest  | grep ClusterIP | awk '{print $1,$3}'`
do
  echo $record
  array[$idx]=$record
  let "idx+=1"
done

echo ${array[*]}
leng=${#array[*]}
last_indx=`expr $leng - 1`


#for i in {0..$last_indx};do
#for i in $(seq 0 $last_indx) ; do
#  echo $i
#  if [[ $i%2 -eq 0 ]]; then
#    cluster=${array[$i]}
#  else
#    ip=${array[$i]}
#done


# define a map to store the res we getted, and make it format as CLUSTER_NAME:CLUSTER_IP
indx=0
declare -A map
while [[ $indx -le $last_indx ]]; do
  if [[ $indx%2 -eq 0 ]]; then
    cluster=${array[$indx]}
    let "indx+=1"
    ip=${array[$indx]}
    map["$cluster"]="$ip"
    let "indx+=1"
  fi
done

# CAST TO A LIST, it will only store the CLUSTER IPS.
cur_svcs_list=${map[*]}

# CHECK THE GUEST OS ROUTES
for route_target_ip in `ip route | grep $TAGET_BRIDGE_NAME | grep $TARGET_GW_IP | grep -v 172.17.0.0 | awk '{print $1}'`; do

  if [[ ${cur_svcs_list[@]/$route_target_ip/} != ${cur_svcs_list[@]} ]]; then
    echo "GET GOOD IP $route_target_ip"
    cur_svcs_list=( ${cur_svcs_list[*]/$route_target_ip} )
    echo ${cur_svcs_list[*]}
  else
    echo "GET BAD IP $route_target_ip -- NEED TO REMOVE THE ROUTE RULE."
    echo "REMOVING -----"

    echo "EXEC:  sudo ip route del $route_target_ip via $TARGET_GW_IP"
    sudo ip route del $route_target_ip via $TARGET_GW_IP
    echo "--------------"
  fi

done

if [ ! -n $cur_svcs_list ]; then
  echo "CHECK DONE -- FROM CHECK OK SPLIT"

else
  for needip in ${cur_svcs_list[@]}; do
    echo "ADDING"

    echo "EXEC: sudo ip route add $needip via $TARGET_GW_IP"
    sudo ip route add $needip via $TARGET_GW_IP
    echo "--------------"
  done

  echo "CHECK DONE -- FROM RECOVER SPLIT"
fi

# Init the /etc/hosts
echo "--- INIT /etc/hosts ---"
sudo bash -c 'cat << EOF > /etc/hosts
# This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:
# [network]
# generateHosts = false
127.0.0.1	localhost
127.0.1.1	DESKTOP-U0I7MO9

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF'
echo "--- INIT /etc/hosts --- OK"

# ADD THE MISSED CLUSTER_IP AND DOMAINNAME TO /ETC/HOSTS
echo "--- ADD SVC INTO /etc/hosts ---"
for cluster in ${!map[@]}; do
  cluster_name=$cluster.default
  ip=${map[$cluster]}
  echo "sudo echo $ip $cluster_name >> /etc/hosts"
  sudo bash -c "echo $ip $cluster_name >> /etc/hosts"
done
echo "--- ADD SVC INTO /etc/hosts --- OK"
